.. default-domain:: chpl

.. module:: chplLogging
   :synopsis: A logging module.  Supports multiple run/log levels (such as DEBUG, RUNTIME,

chplLogging
===========
**Usage**

.. code-block:: chapel

   use chplLogging;



A logging module.  Supports multiple run/log levels (such as DEBUG, RUNTIME,
etc) and multiple output channels (useful for logging output from individual
tasks).  Messages can be written to a channel any level simply by calling
the level appropriate function.  Write requests are ignored if the current
runtime is greater than the runtime level of the call.

As an example:

.. highlight:: chapel

::

  use chplLogging;

  var log = new owned chplLogging.chplLogger();
  var ch = new chplLogging.logHeader();

  log.currentDebugLevel = 0;
  log.log('Oh man', 'hello world!', ch); // prints a runtime warning to stdout.

  ch.header = 'TEST'; // now, any subsequent calls with this ch will be written to TEST.log
  log.log('Hey, why are we writing to a log file?', ch);
  log.critical('Use me for failures!  I am always printed');
  log.debug('I am only printed if the debugLevel = 0!', ch);
  log.warning('Who even cares about me?');

  ch.header = 'stdout'; // move back to using stdout
  log.runtime('So, this message will go to stdout...', ch);
  log.debug('This goes only if the debug level is set.  See how the header changes?', ch);

  // We can also use this to set a stack trace.  We can pass around ch and add
  // strings to it to let us know what function is calling.

  proc mainFunction(ch: chplLogging.chplLogger) {
    ch += 'mainFunction';
    log.runtime('Calling!');

  }

  proc secondaryFunction(ch: chplLogging.chplLogger) {
    ch += 'secondaryFunction';
    log.runtime('Calling!');

  }

  mainFunction(ch);




.. data:: config const flushToLog: bool = false

   
   If set to true, we explicitly call an fsync on the file and channel
   every time we log.  Useful for debugging when your program might just
   kick the bucket without properly closing the file.
   
   Defaults to false.
   
   

.. data:: config const stdoutOnly: bool = false

   
   If set to true, calls fsync on file channels every time a log function
   is called.  This is useful for debugging, as it ensures that the log files
   are written to before the program crashes.
   
   Defaults to false.
   
   

.. record:: logHeader

   
   
   A record specifying where and how a message should be written.  This is
   passed through to the function calls such as `log` and `debug`, which the
   printToConsole method in chplLogger uses to determine whether to open a new
   channel, use an existing one, or send in to stdout.  By default, it's set to
   use stdout.
   
   :arg levels: How many layers deep should the stack trace (or whatever else is
     in msg) go?  Defaults to 10.
   
   :arg m: The domain for msg.  This is an int domain and is used to ensure that
     order of addition is kept when printing msg back out.
   
   :arg msg: The set of strings that make up the header.  This is printed to a
     channel when printedHeader = true; the chplLogger simply calls `write` on the
     logHeader, and the writeThis() function prints the header if necessary.
     By default, this is treated as a stack trace: each element in the msg array is
     printed in the order it was added, separated by `sep`, starting at the end
     and going `levels` back.  To add to this array, simply + a string to the logHeader.
   
   :arg sep: The string to use to separate elements in msg when writing.
   
   :arg id: an ID that is used internally as a name for the channel.  Note that
     to ensure different messages are sent to different channels, the ids of two
     different logHeaders must be unique.  Otherwise, the channels will overwrite
     each other
   
   :arg header: used to identify whether or not the message should be sent
     to stdout, or to a file.  header is used as the filename, and is kept
     different from id to allow multiple channels to write to the same file.
     Since chplLogger blocks, writes should be safe.
   
   :arg currentTask: An optional value which can be used to track which logHeader
     is being used in which task.  Can also be used for naming files.
   
   :arg time: The initial creation time of the logHeader.  This is used to
     timestamp the time that messages are written (not the time that a write
     was requested).
   
   :arg printedHeader: If false, writeThis() will print the header.  Otherwise,
     the header is ignored.
   
   :arg useTime: Whether or not to timestamp a message.
   
   


   .. attribute:: var levels: int = 10

   .. attribute:: var m: domain(int)

   .. attribute:: var msg: [m] string

   .. attribute:: var sep: string = "//"

   .. attribute:: var id: string = "stdout"

   .. attribute:: var currentTask: int

   .. attribute:: var header: string

   .. attribute:: var time: string

   .. attribute:: var printedHeader: bool = false

   .. attribute:: var useTime: bool = true

   .. method:: proc writeThis(wc)

   .. method:: proc path()

   .. method:: proc size

.. function:: proc +(a: logHeader, b: string)

   
   
   Function overloads for the logHeader which allow add strings, in order, to the
   internal domain to allow for simplification of a stack trace.
   
   

.. function:: proc +(b: string, a: logHeader)

   
   
   Same as above, but in the reverse case.
   
   

.. function:: proc +=(ref a: logHeader, b: string)

   
   
   In case you like a good in-place addition.
   
   

.. class:: chplLogger

   
   
   The logging module.  This is what is responsible for storing file handles,
   channels, and most of the formatting options.
   
   :arg currentDebugLevel: What level of messages to print.  Valid values are
     -1, 0, 1, and 2.  -1 should not be used externally and is used to disable
     every log call that is NOT called with .devel().  This is the type of thing
     you would set with a configuration flag, for instance.
   
   :arg maxCharacters: how many characters can be printed on one line before
     a new line is written.  Note that this is 'fuzzy' currently.  Eventually,
     you'll be able to disable newlines altogether (useful when making a log
     searchable or human readable).
   
   :arg headerStarter: Filler character used in the various headers.
   
   :arg indent: How many spaces should proceed each message?
   
   :arg fileName: What logfile should stdout go to?
   
   :arg logsDir: What directory logs should be stored in.
   
   


   .. attribute:: var currentDebugLevel: int

   .. attribute:: var DEVEL = -1

      Constants for use in determing log levels 

   .. attribute:: var DEBUG = 0

   .. attribute:: var WARNING = 1

   .. attribute:: var RUNTIME = 2

   .. attribute:: var maxCharacters = 160

   .. attribute:: var headerStarter = "/"

   .. attribute:: var indent = 5

   .. attribute:: var l = new shared AppendExpr.Call08

   .. attribute:: var tId: int

   .. attribute:: var filesOpened: domain(string)

   .. attribute:: var channelsOpened: [filesOpened] channel(true, iokind.dynamic, true)

   .. attribute:: var channelDebugHeader: [filesOpened] string

   .. attribute:: var channelDebugPath: [filesOpened] string

   .. attribute:: var fileHandles: [filesOpened] file

   .. attribute:: var lastDebugHeader = ""

   .. attribute:: var time = AppendExpr.Call08

   .. attribute:: var fileName = "chpl.log"

   .. attribute:: var logsDir = ""

   .. method:: proc exitRoutine()

      Called in the event of a shutdown to ensure channels are closed and files are synced 

   .. method:: proc formatHeader(mtype: string)

      Formats the debugLevel header, not the stack trace header. 

   .. method:: proc printToConsole(msg, debugLevel: string, lh: logHeader, header: bool) throws

      
      
      The bulk of the logic.  This is responsible for parsing the logHeader,
      determining what channel should be written to, and opening it if necessary.
      Note that things can be sent to both stdout AND a log file for stdout (think
      of the tee program).  It determines whether the incoming message is of the
      same debugLevel or not, and if not, prints a new header.
      
      Do not call this directly; it only prints what it's told to print.
      
      Has separate logic for 'regular' or 'header' type messages; header type
      messages are things like logos, etc.  They are not timestamped and
      have slightly different formatting.  They are also not assumed to be splittable.
      
      

   .. method:: proc genericMessage(msg, mtype: int, debugLevel: string, gt: bool)

      
      
      Takes input information from the actual log calling functions, determines
      whether the current debugLevel allows it to be written, then calls
      printToConsole if true.
      
      This version supports not using a logHeader.  You probably shouldn't use it.
      
      

   .. method:: proc genericMessage(msg, mtype: int, debugLevel: string, lh: logHeader, gt: bool)

      
      
      Same as above, but supports using an actual logHeader.
      
      

   .. method:: proc genericMessage(msg, mtype: int, debugLevel: string, lh: logHeader, gt: bool, header: bool)

      
      
      Not too different from the above, but is used solely by the .header() method.
      
      

   .. method:: proc debug(msg ...?n)

      Call this in your program to do debug logging 

   .. method:: proc debug(msg ...?n, in lh: logHeader)

      Call this in your program to do debug logging w/ a logHeader 

   .. method:: proc devel(msg ...?n)

      Call this in your program to do DEVEL type logging, sans logHeader 

   .. method:: proc devel(msg ...?n, in lh: logHeader)

      Call this in your program to do DEVEL type logging 

   .. method:: proc warning(msg ...?n)

      Call this in your program to call a RUNTIME WARNING, sans logHeader 

   .. method:: proc warning(msg ...?n, in lh: logHeader)

      Call this in your program to call a RUNTIME WARNING 

   .. method:: proc log(msg ...?n)

      Call this in your program for normal program logging, sans logHeader 

   .. method:: proc log(msg ...?n, in lh: logHeader)

      Call this in your program for normal program logging 

   .. method:: proc critical(msg ...?n, in lh: logHeader)

      Call this in your program for critical failure messages. 

   .. method:: proc critical(msg ...?n)

      Call this in your program for critical failure messages, sans logHeader. 

   .. method:: proc header(msg ...?n)

      Call this in your program to print out logo-type messages, sans logHeader. 

   .. method:: proc header(msg ...?n, in lh: logHeader)

      Call this in your program to print out logo-type messages. 

